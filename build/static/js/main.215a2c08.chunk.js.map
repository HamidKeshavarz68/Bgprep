{"version":3,"sources":["components/CFullPage.js","components/base/FlagIcon.js","components/base/CRadarChart.js","components/base/CLineChart.js","components/CUtils.js","components/CSearchPage.js","components/base/CMap.js","components/CReportPage.js","components/CResources.js","components/CDownload.js","components/CAbout.js","App.js","serviceWorker.js","index.js"],"names":["CFulPageSlide","state","touchStartPos","className","id","this","props","idName","children","React","Component","CFullPage","prop","activeChild","url","window","location","pathname","replace","i","label","toLowerCase","e","index","target","attributes","data","value","Number","preventDefault","stopPropagation","setState","add","childCnt","length","slider","changePage","deltaY","indicator","map","c","key","onClick","onMenuClick","navBarMenus","undefined","Nav","Link","Navbar","bg","variant","sticky","Brand","href","event","touches","screenY","diff","changedTouches","renderIndicator","navBar","renderNavBar","onWheel","onScroll","onTouchStart","onTouchEnd","FlagIcon","FlagIconFactory","useCssModules","CRadarChart","shortid","generate","ctx","$","options","scale","angleLines","display","ticks","suggestedMin","min","suggestedMax","max","Chart","type","chartData","CLineChart","responsive","hoverMode","stacked","title","text","scales","yAxes","position","CUtils","val","valNum","po","Math","ceil","maxSize","slice","vn","backgroundColor","color","cat","pTranslateTable","translateTable","pCountryData","require","obj","code","name","toUpperCase","FormatLongString","CSearchPage","error","info","colorVal","GetSafetyScoreColor","style","items","body","GetCatLabel","category","report_count","uniq_address","abs_rank","rank","getSafetyLevelVal","safety_level","Table","object","renderResultBody","uniqIp","reduce","a","b","rIp","cnt_code","total_ip","FormatFPower","f_power","as_number","isp","cntInfo","bgpInfo","labels","valuesCnt","valuesAS","item","push","bgpItem","filter","datasets","marginTop","colors","generateRandom","result","floor","random","dataSet","fill","borderColor","start","Date","getTime","d","strD","getMonth","getDate","generateDates","Container","Form","inline","FormControl","placeholder","minWidth","ref","Button","onSearchClick","cntSecData","cnt","asSecData","as","help","renderInformation","renderLocationResult","asInfo","renderASResult","radarChart","renderRadarChart","inSearchResult","renderInResultSearch","Row","Col","refs","address","match","ajax","dataType","success","res","err","alert","infoClass","renderSearchStart","renderResult","CMap","select","setColors","WordData","layers","l","selector","css","mapData","prevProps","console","log","mapDataName","CReportASTopTable","abs","fetchValue","height","width","catObj","find","GetCountryNameByID","xs","Check","changeSort","checked","size","CReportCountryTopTable","CReportCountryMapTable","cntStat","currentCnt","selected","cntCatData","objList","onCatSelected","cntCode","onSelectItem","when","then","updateCountryInfo","CReportPage","status","currentCntCat","currentCntCatData","objects","uniq_ip","Fragment","icon","Card","marginBottom","Title","Text","cntId","onMapClick","renderCard","uinq_ip","resource_count","set_count","last_update","renderMap","stat","CResources","includes","CDownload","fileNames","paddingTop","hash","format","description","CAbout","maxWidth","fixed","App","brand","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.215a2c08.chunk.js","sourcesContent":["import React from 'react';\nimport {Navbar,Nav} from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./CFullPage.css\"\n//-------------------------------------------------------------------------------------\nclass CFulPageSlide extends React.Component {\n    state={}\n    touchStartPos=0\n    //--------------------------------------------------------------------------------\n    render(){\n        return(\n            <div className=\"CFullPageSlide\" id={this.props.idName}>\n                {this.props.children}\n            </div>\n        )\n    }\n}\n\n//-------------------------------------------------------------------------------------\nclass CFullPage extends React.Component {\n    state={\n        activeChild:0\n    }\n    //--------------------------------------------------------------------------------\n    constructor(prop){\n        super(prop);\n        \n        //check for active url\n        let url=window.location.pathname.replace(\"/\",\"\");\n        for (let i in this.props.children){\n            let l=this.props.children[i].props.label.toLowerCase();\n            if (l===url){\n                this.state.activeChild=i;\n                break;\n            }\n        }\n    }\n    //--------------------------------------------------------------------------------\n    onMenuClick(e){\n        let index=e.target.attributes.data.value;\n        let state =this.state;\n        state.activeChild=Number(index);\n        e.preventDefault();\n        e.stopPropagation();\n        this.setState(state);\n    }\n    //--------------------------------------------------------------------------------\n    changePage(add){\n        \n        let childCnt=this.props.children.length;\n        let state =this.state;\n\n\n        //in non slider mode do nothing\n        if(this.props.slider!==true){\n            return(null)\n        }\n    \n        if (add===false) {\n            state.activeChild--;\n            if(state.activeChild < 0) state.activeChild=0;\n        } else{\n            state.activeChild++;    \n            if(state.activeChild >= childCnt) state.activeChild=(childCnt-1);\n        }\n        this.setState(state);\n    }\n    //--------------------------------------------------------------------------------\n    onScroll(e){\n        this.changePage(e.deltaY > 0);\n    }\n    //--------------------------------------------------------------------------------\n    renderIndicator(){\n        //check for simulating normal pages\n        if(this.props.slider!==false){\n            return(null)\n        }\n\n        let indicator=this.props.children.map((c,i)=>{\n            let className=(this.state.activeChild===i) ? \"CFullPageSlideBulletSelected\":\"CFullPageSlideBullet\";\n            return(\n                <li key={i} className={className} data={i} onClick={(e)=>(this.onMenuClick(e))}><div></div></li>\n            )\n        })\n        return (<ul className=\"CFullPageIndicator bg-dark\">{indicator}</ul>)  \n    }\n    //--------------------------------------------------------------------------------\n    renderNavBar(){\n        let navBarMenus=this.props.children.map((c,i)=>{\n            let label=(c.props.label!==undefined ? c.props.label:`Page ${i}`);\n            let className=(this.state.activeChild===i) ? \"active\":\"\";\n            return (<Nav.Link   className={className}\n                                key={i} \n                                data={i} \n                                onClick={(e)=>(this.onMenuClick(e))}>\n                        {label}\n                    </Nav.Link>)\n        })\n        return(\n            <div className=\"CFullPageNavbar bg-dark d-none d-sm-block\">\n                \n                <Navbar bg=\"dark\" variant=\"dark\" sticky=\"top\"> \n                <Navbar.Brand href=\"#home\"><i className=\"flaticon-connection icon\"></i>BGP Reputation</Navbar.Brand>\n                    <Nav className=\"mr-auto\">\n                        {navBarMenus}\n                    </Nav>\n                </Navbar>\n                \n            </div>\n        )\n    }\n    //--------------------------------------------------------------------------------\n    onTouchStart(event){\n        this.touchStartPos=event.touches[0].screenY;\n    }\n    //--------------------------------------------------------------------------------\n    onTouchEnd(event){\n        let diff=event.changedTouches[0].screenY-this.touchStartPos;\n        this.changePage(diff>0)\n    }\n    //--------------------------------------------------------------------------------\n    render(){\n        \n        //check empty child\n        if (this.props.children.length===0){\n            return (<div></div>)\n        }\n        \n        //generate page indicator\n        let indicator=this.renderIndicator();\n        let navBar =this.renderNavBar();\n        \n        //return list\n        return(\n            <div className=\"CFullPage\" \n                onWheel={(e) => this.onScroll(e)} \n                onTouchStart={(e) => this.onTouchStart(e)} \n                onTouchEnd={(e) => this.onTouchEnd(e)}>\n                    {navBar}\n                    {this.props.children[this.state.activeChild]}\n                    {indicator}\n            </div>\n        )   \n    }\n    \n}\n\nexport { CFullPage, CFulPageSlide}","/* your-app/your-components-directory/FlagIcon.js */\n// @flow\nimport * as React from 'react'\nimport FlagIconFactory from 'react-flag-icon-css'\n \n// Please only use `FlagIconFactory` one time in your application, there is no\n// need to use it multiple times (it would slow down your app). You may place the\n// line below in a `FlagIcon.js` file in your 'components' directory, then\n// write `export default FlagIcon` as shown below and import it elsewhere in your app.\nconst FlagIcon = FlagIconFactory(React, { useCssModules: false }) \n// If you are not using css modules, write the following:\n// const FlagIcon = FlagIconFactory(React, { useCssModules: false })\n \nexport default FlagIcon","import React from \"react\"\nimport shortid from \"shortid\";\nimport Chart from \"chart.js\"\nimport $ from \"jquery\"\n\n\nimport \"./CRadarChart.css\"\n\nclass CRadarChart extends React.Component {\n    state={id:shortid.generate()}\n    //--------------------------------------------------------------------------------------------------------  \n    render() {\n        return(\n            <div className=\"CRadarChart\">\n                <canvas id={this.state.id}>\n                </canvas>\n            </div>\n        )\n    }\n    //--------------------------------------------------------------------------------------------------------\n    componentDidMount(){\n        let ctx=$(\"#\"+this.state.id)\n        let options = {\n            scale: {\n                angleLines: {\n                    display: true\n                },\n                ticks: {\n                    suggestedMin: this.props.min,\n                    suggestedMax: this.props.max\n                }\n            },\n        };\n\n\n        new Chart(ctx, {\n            type: 'radar',\n            data:this.props.chartData,\n            options: options,\n        });\n    }\n}\n\nexport default CRadarChart","import React from \"react\"\nimport shortid from \"shortid\";\nimport Chart from \"chart.js\"\nimport $ from \"jquery\"\n\n\nimport \"./CLineChart.css\"\n\nclass CLineChart extends React.Component {\n    state={id:shortid.generate()}\n    //--------------------------------------------------------------------------------------------------------  \n    render() {\n        return(\n            <div className=\"CLineChart\">\n                <canvas id={this.state.id}>\n                </canvas>\n            </div>\n        )\n    }\n    //--------------------------------------------------------------------------------------------------------\n    componentDidMount(){\n        let ctx=$(\"#\"+this.state.id)\n        let options = \n        {\n            responsive: true,\n            hoverMode: 'index',\n            stacked: false,\n            title: {\n                display: true,\n                text: this.props.label\n            },\n            scales: {\n                yAxes: [{\n                    type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n                    display: true,\n                    position: 'left',\n                    id: 'y-axis-1',\n                }],\n            }\n        };\n\n\n        new Chart(ctx, {\n            type: 'line',\n            data:this.props.chartData,\n            options: options,\n        });\n    }\n}\n\nexport default CLineChart","class CUtils {\n    static pCountryData=null;\n    static pTranslateTable=null;\n    //--------------------------------------------------------------------------------\n    static FormatFPower(val){\n        let valNum = Number(val);\n        let po=\"Mb\"\n        if (valNum > 1000000){\n            valNum=valNum/1000000;\n            po=\"Tb\"\n        } else if (valNum > 1000) {\n            valNum=valNum/1000;\n            po=\"Gb\"\n        } \n\n        valNum = Math.ceil(valNum)\n        return (valNum + \" \" + po);\n    }\n    //--------------------------------------------------------------------------------\n    static FormatLongString(val,maxSize){\n        if (val.length <  maxSize){\n            return val;\n        } \n        \n        val=val.slice(0,maxSize)\n        return val+\"...\"\n    }\n    //--------------------------------------------------------------------------------\n    static GetSafetyScoreColor(vn){\n        let backgroundColor=\"green\";\n        let color=\"white\"\n        if (vn > 6 ){\n            backgroundColor=\"green\";\n        } else if(vn > 4) {\n            backgroundColor=\"blue\";\n        } else if(vn > 2) {\n            backgroundColor=\"yellow\";\n            color=\"black\";\n        } else if(vn > 1) {\n            backgroundColor=\"orange\";\n            color=\"black\";\n        } else {\n            backgroundColor=\"red\";\n        }\n        return {backgroundColor:backgroundColor,color:color};\n    }\n    //--------------------------------------------------------------------------------\n    static GetCatLabel(cat){\n        if(CUtils.pTranslateTable==null){\n            CUtils.translateTable={}\n            CUtils.translateTable[\"ad-servers\"]=\"AD Servers\"\n            CUtils.translateTable[\"open-proxy\"]=\"Open Proxy\"\n            CUtils.translateTable[\"open-access\"]=\"Open Access\"\n            CUtils.translateTable[\"gray-list\"]=\"Gray List\"\n            CUtils.translateTable[\"tor\"]=\"Tor\"\n            CUtils.translateTable[\"spammer\"]=\"Spammer\"\n            CUtils.translateTable[\"harvesters\"]=\"Harvesters\"\n            CUtils.translateTable[\"miner\"]=\"Miner\"\n            CUtils.translateTable[\"child_pornography_share\"]=\"Child Sex Abuse Material\"\n            CUtils.translateTable[\"black-list\"]=\"Black List\"\n        }\n\n        return  CUtils.translateTable[cat];\n    }\n    //--------------------------------------------------------------------------------\n    static GetCountryNameByID(id){\n        if (CUtils.pCountryData===null) {\n            const data = require('./base/data/code.json');\n            CUtils.pCountryData={}\n            for(let obj of data){\n                CUtils.pCountryData[obj.code]=obj.name;\n            }\n        }\n\n        id=id.toUpperCase();\n        let name=CUtils.pCountryData[id]\n        if (name===undefined){\n            return id\n        }\n        return CUtils.FormatLongString(name,15)\n    }\n    //--------------------------------------------------------------------------------\n}\n\nexport default CUtils;","import './CSearchPage.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../fonts/flaticon.css'\n\nimport React from 'react';\nimport {Button, Container, Form, FormControl, Row, Table,Col} from 'react-bootstrap'\nimport FlagIcon from './base/FlagIcon'\nimport CRadarChart from './base/CRadarChart'\nimport CLineChart from './base/CLineChart'\nimport $ from \"jquery\"\nimport CUtils from './CUtils'\n\nclass CSearchPage extends React.Component {\n    state = {error:false,info:null}\n    //--------------------------------------------------------------------------------\n    getSafetyLevelVal(value){\n        let vn=Number(value);\n        let colorVal=CUtils.GetSafetyScoreColor(vn)\n        let color=colorVal.color\n        let backgroundColor=colorVal.backgroundColor;\n\n        return (<div className=\"CSearchReportValue\">\n                    <div style={{backgroundColor:backgroundColor,color:color}}>\n                        {value}\n                    </div>\n                </div>)    \n    }\n    //--------------------------------------------------------------------------------\n    renderResultBody(items){\n        let body = items.map((c,i)=>{\n            return (\n            <tr key={i}>\n                <td key={1}>{CUtils.GetCatLabel(c.category)}</td>\n                <td key={2}>{c.report_count}</td>\n                <td key={3}>{c.uniq_address}</td>\n                <td key={4}>{c.abs_rank}</td>\n                <td key={5}>{c.rank}</td>\n                <td key={6}>{this.getSafetyLevelVal(c.safety_level)}</td>\n            </tr>\n            )\n        });\n        \n        return(\n        <Table responsive>\n            <thead>\n                <tr>\n                    <th>Category</th>\n                    <th>Reported IP</th>\n                    <th>Unique IP</th>\n                    <th>ABS Rank</th>\n                    <th>Relative Rank</th>\n                    <th>Safety Score</th>\n                </tr>\n            </thead>\n            <tbody>\n                {body}\n            </tbody>\n        </Table>)\n    }\n    //--------------------------------------------------------------------------------\n    renderLocationResult(object) {\n        \n        let body=this.renderResultBody(object.items);\n        \n        let uniqIp=object.items.reduce((a,b)=>{\n            return a+Number(b.uniq_address);\n        },0);\n        \n        let rIp=object.items.reduce((a,b)=>{\n            return a+Number(b.report_count);\n        },0);\n\n\n        return(\n            <div className=\"CSearchReportHeader\">\n                <h3><i className=\"flaticon-geolocalization icon\"></i>Location Information</h3>\n                <div>\n                    <Table responsive>\n                        <thead>\n                            <tr>\n                                <th>Country</th>\n                                <th>Total IP</th>\n                                <th>Reported IP</th>\n                                <th>Unique IP</th>\n                                <th>est. DOS Fire Power</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td><FlagIcon code={object.cnt_code.toLowerCase()}/> {object.cnt_code} </td>\n                                <td>{object.total_ip}</td>\n                                <td>{rIp}</td>\n                                <td>{uniqIp}</td>\n                                <td>{CUtils.FormatFPower(object.f_power)}</td>\n                            </tr>\n                        </tbody>\n                    </Table>\n                </div>\n                {body}\n            </div>\n        )            \n    }\n    //--------------------------------------------------------------------------------\n    renderInformation(){\n        return(\n            <div>\n                <p>\n                </p>\n            </div>\n        )\n    }\n    //--------------------------------------------------------------------------------\n    renderASResult(object) {\n        let body=this.renderResultBody(object.items);\n        \n        let uniqIp=object.items.reduce((a,b)=>{\n            return a+Number(b.uniq_address);\n        },0);\n        \n        let rIp=object.items.reduce((a,b)=>{\n            return a+Number(b.report_count);\n        },0);\n\n\n        return(\n            <div className=\"CSearchReportHeader\">\n                <h3><i className=\"flaticon-connection icon\"></i>BGP AS Information</h3>\n                <div>\n                    <Table responsive>\n                        <thead>\n                            <tr>\n                                <th>AS</th>\n                                <th>Provider</th>\n                                <th>Total IP</th>\n                                <th>Reported IP</th>\n                                <th>Unique IP</th>\n                                <th>est. DOS Fire Power</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>{object.as_number} </td>\n                                <td>{object.isp} </td>\n                                <td>{object.total_ip}</td>\n                                <td>{rIp}</td>\n                                <td>{uniqIp}</td>\n                                <td>{CUtils.FormatFPower(object.f_power)}</td>\n                            </tr>\n                        </tbody>\n                    </Table>\n                </div>\n                {body}\n            </div>\n        )            \n    }\n    //--------------------------------------------------------------------------------\n    renderRadarChart(cntInfo,bgpInfo){\n        \n        let labels=[]\n        let valuesCnt=[]\n        let valuesAS=[]\n\n        for(let item of cntInfo.items){\n            labels.push(CUtils.GetCatLabel(item.category))\n            valuesCnt.push(item.safety_level)\n            \n            let bgpItem=bgpInfo.items.filter((val)=>{\n               if (val.category===item.category) {\n                   return true;\n               }\n               return false;\n            })\n            valuesAS.push(bgpItem[0].safety_level)\n        }\n\n        let data= {\n                        labels: labels,\n                        datasets: [\n                            {    \n                                label:\"Country\",\n                                backgroundColor: \"rgba(0,255,0,0.3)\",\n                                data: valuesCnt\n                            },\n                            {    \n                                label:\"BGP AS\",\n                                backgroundColor: \"rgba(0,0,255,0.3)\",\n                                data: valuesAS\n                            },\n                    ]\n        }\n\n        return (\n            <div style={{marginTop:\"4%\"}}>\n                <p>\n                </p>\n                <CRadarChart min={0} max={10} chartData={data}/>\n            </div>\n            \n        )\n    }\n    //--------------------------------------------------------------------------------\n    renderHistory(){\n        let colors=[\"green\",\"blue\"];\n\n        \n\n        let generateRandom=()=>{\n            let result=[];\n            for (let i=0;i<30;i++){\n                result.push(Math.floor((Math.random()*100000)));\n            }\n            return result;\n        }\n\n        let generateDates=()=>{\n            let result=[];\n            let start= new Date().getTime();\n            for (let i=0;i<30;i++){\n                let d= new Date(start);\n                let strD=\"\"\n                strD = d.getMonth()+1;\n                strD += \"/\"+d.getDate();\n\n                result.push(strD);\n\n\n                start -= (3600*24*1000);\n            }\n            return result;\n        }\n        \n        let labels = [\"Reported\",\"Uniq\"]\n        let dataSet=labels.map((c,i)=>{\n            let obj={\n                label:c,\n                fill:false,\n                data:generateRandom(),\n                borderColor: colors[i],\n\t\t\t\tbackgroundColor: colors[i],\n            };\n            return obj;\n        });\n\n        let data={\n            labels: generateDates(),\n            datasets:dataSet\n        }\n\n        return (\n            <div style={{marginTop:\"4%\"}}>\n                <CLineChart chartData={data} label=\"One month history\"/>\n            </div>\n        )\n    }\n    //--------------------------------------------------------------------------------\n    renderInResultSearch(){\n        return(\n        <div className=\"CSearchPageResultSearch\">\n            <Container>\n                <Form inline>\n                    <FormControl type=\"text\" placeholder=\"IP or AS Number\" style={{minWidth:\"300px\"}} ref=\"address\" />\n                    <Button variant='outline-success' onClick={(e)=>{this.onSearchClick()}}>Search</Button>\n                </Form>\n            </Container>\n        </div>)\n    }\n    //--------------------------------------------------------------------------------\n    renderResult(info){\n\n        let cntSecData=info.cnt\n        let asSecData=info.as\n\n\n        let help=this.renderInformation();\n        let cntInfo=this.renderLocationResult(cntSecData);\n        let asInfo=this.renderASResult(asSecData);\n        let radarChart=this.renderRadarChart(cntSecData,asSecData);\n        let inSearchResult=this.renderInResultSearch();\n        return(\n            <div className='CSearchPage'>\n                    <Container>\n                        <Row>\n                            <Col>\n                                {inSearchResult}\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                {help}\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                {cntInfo}\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                {asInfo}\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                {radarChart}\n                            </Col>\n                        </Row>\n                    </Container>\n            </div>\n        )\n    }\n    //--------------------------------------------------------------------------------\n    onSearchClick(){\n        let ipMatch=/^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/\n        let asMatch=/^as\\d{1,9}$/\n        let val=this.refs.address.value\n\n        if(val.match(ipMatch)==null && val.match(asMatch)==null){\n            this.setState({error:true})\n        } else {\n            $.ajax({\n                url: '/api/search',\n                dataType: 'json',\n                data:{value:val},\n                success: (res) => {\n                    let state=this.state;\n                    state.info=res;\n                    this.setState(state)\n                },\n                error: (err) => {\n                    alert(`Can not find any information for ${val}`)\n                },\n            });\n        }\n    }\n    //--------------------------------------------------------------------------------\n    renderSearchStart(){\n\n        let infoClass=\"CSearchPageInfo small\"\n        if (this.state.error===true){\n            infoClass +=\" CSearchError\"\n        }\n\n\n        return( \n            <div className='CSearchPage'>\n                <Container className='CSearchPageCenter'>\n                    <Row>\n                        <Col>\n                            <div className='CSearchPageLogo'>\n                                <h1><i className='flaticon-world-location'></i> BGP <span className=\"small\">Reputation</span></h1>\n                            </div>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Form inline>\n                                <FormControl type=\"text\" placeholder=\"IP or AS Number\" style={{minWidth:\"300px\"}} ref=\"address\" />\n                                <Button variant='outline-success' onClick={(e)=>{this.onSearchClick()}}>Search</Button>\n                            </Form>\n                        </Col>\n                    </Row>\n                    <Row >\n                        <span className={infoClass}>For example : 8.8.8.8 or as1234</span>\n                    </Row>\n                    <Row >\n                        <span className=\"CSearchPageInfo small\"></span>\n                    </Row>\n                </Container>\n            </div>\n        )\n    }\n    //--------------------------------------------------------------------------------\n    render(){\n        let result=null;\n        \n        if(this.state.info===null){\n            result=this.renderSearchStart();\n        } else {\n            result=this.renderResult(this.state.info);\n        }\n        return (result);\n    }\n}\nexport default CSearchPage;","import React from 'react';\nimport \"./CMap.css\"\n\nimport { VectorMap} from '@south-paw/react-vector-maps'; //https://react-vector-maps.netlify.com/examples\nimport { Container } from 'react-bootstrap';\nimport $ from 'jquery'\n\nclass CMap extends React.Component {\n    state={select:'de'}\n    colors=[\"#1a0000\",\"#660000\",\"#8b0000\",\"#cc0000\",\"#ff0000\",\"#ff3333\",\"#ff6666\",\"#ff8080\",\"#ffb3b3\",\"#ffe6e6\",\"#eee\"]\n    //--------------------------------------------------------------------------------\n    onClick = ({ target }) => {\n      \n      if(target.attributes.id===undefined){\n        return;\n      }\n\n\n      const id = target.attributes.id.value;\n      let state=this.state;\n      state.select=id\n      this.setState(state)\n      this.setColors()\n\n      //check for callback\n      if (this.props.onClick!==undefined){\n        this.props.onClick(id)\n      }\n\n\n    }\n    //--------------------------------------------------------------------------------\n    setColors(){\n      const WordData = require('./data/world-low-res.json');\n      //WordData.layers.length\n      for(let l of WordData.layers ){\n        let selector=`.CMapContainer #${l.id}`\n        if (l.id===this.state.select){\n          $(selector).css('fill', 'green');\n        } else {\n          if(this.props.mapData!=null){\n            let color=this.colors[this.props.mapData[l.id]]\n            $(selector).css('fill', color);\n            //$(selector).css('fill', '#111');\n          }else {\n            $(selector).css('fill', '#eee');\n          }\n        }\n        //let index = Math.ceil((Math.random()*100))%5\n        //$(selector).css('fill', this.colors[index]);\n        \n      }\n    }\n    //--------------------------------------------------------------------------------\n    render(){\n      const WordData = require('./data/world-low-res.json');\n      return(\n          <div className=\"CMap\">\n              <Container>\n                <div className=\"CMapContainer\">\n                    <VectorMap {...WordData} onClick={this.onClick}/>;\n                </div>\n              </Container>\n          </div>\n        )   \n    }\n    //--------------------------------------------------------------------------------\n    componentDidMount(){\n      this.setColors()\n    }\n    //--------------------------------------------------------------------------------\n    componentDidUpdate(prevProps){\n      console.log(prevProps.mapData)\n      if(prevProps.mapDataName===this.props.mapDataName){\n        return\n      }\n\n      \n\n      this.setColors();\n    }\n}\n\nexport default CMap","import './CReportPage.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../fonts/flaticon.css'\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\n\nimport React from 'react';\nimport {Table,Card,Row,Col,Container,Form} from 'react-bootstrap'\nimport FlagIcon from './base/FlagIcon'\nimport CMap from './base/CMap'\nimport Loader from 'react-loader-spinner'\nimport CUtils from './CUtils'\nimport $ from 'jquery'\n\n\nclass CReportASTopTable extends React.Component {\n    state={info:null,abs:false}\n    //--------------------------------------------------------------------------------\n    fetchValue(abs){\n        $.ajax({\n            url: '/api/topas',\n            dataType: 'json',\n            data:{cat:this.props.cat,abs:abs},\n            success: (res) => {\n                let state=this.state;\n                state.info=res;\n                state.abs=abs;\n                this.setState(state)\n            },\n            error: (err) => {\n                console.log(err)\n            },\n        });\n    }\n    //--------------------------------------------------------------------------------\n    changeSort(abs){\n        this.fetchValue(abs)\n    }\n    //--------------------------------------------------------------------------------\n    render(){\n\n        //check for empty stat\n        if (this.state.info===null){\n            return(\n                <Loader \n                className=\"CReportPageLoad\"\n                type=\"Oval\"\n                color=\"green\"\n                height={50}\n                width={50}/>)\n        }\n\n        \n\n        let body = this.state.info.map((object, index) => {\n            let catObj=object.items.find((item)=>{\n                if (item.category===this.props.cat){\n                    return true;\n                }   \n                return false;\n            })\n            return (\n                <tr key={index}>\n                    <td key={1}>{object.as_number}</td>\n                    <td key={2}>{CUtils.FormatLongString(object.isp,16)}</td>\n                    <td key={3}><FlagIcon code={object.cnt.toLowerCase()}/>{\" \"+CUtils.GetCountryNameByID(object.cnt)}</td>\n                    <td key={4}>{this.state.abs===false ? catObj.abs_rank : catObj.rank}</td>\n                    <td key={5}>{catObj.report_count}</td>\n                    <td key={6}>{catObj.uniq_address}</td>\n                </tr>)\n        })\n\n        //\n        return (\n            <div className=\"CReportPageTopCountryChart\">\n                <Row>\n                    <Col xs={8}><h5>{this.props.label}</h5></Col>\n                    <Col>\n                        <Form.Check type=\"checkbox\" label=\"Absolute Rank\" onClick={(e)=>{this.changeSort(e.target.checked)}}/>\n                    </Col>\n                </Row>\n                \n                <Table responsive size=\"sm\">\n                    <thead>\n                        <tr>\n                            <th>AS</th>\n                            <th>ISP</th>\n                            <th>Country</th>\n                            <th>{this.state.abs===false? \"ABS Rank\":\"REL Rank\"}</th>\n                            <th>Total IP</th>\n                            <th>Uniq IP</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {body}\n                    </tbody>\n                </Table>\n            </div>\n        )\n    }\n    //--------------------------------------------------------------------------------\n    componentDidMount(){\n        this.fetchValue(false);\n    }\n    //--------------------------------------------------------------------------------\n    componentDidUpdate(){\n        //this.fetchValue();\n    }\n}\n//====================================================================================\nclass CReportCountryTopTable extends React.Component {\n    state={info:null,\n            abs:false}\n    //--------------------------------------------------------------------------------\n    fetchValue(abs){\n        $.ajax({\n            url: '/api/topcnt',\n            dataType: 'json',\n            data:{cat:this.props.cat,abs:abs},\n            success: (res) => {\n                let state=this.state;\n                state.info=res;\n                state.abs=abs;\n                this.setState(state)\n            },\n            error: (err) => {\n                console.log(err)\n            },\n        });\n    }\n    //--------------------------------------------------------------------------------\n    changeSort(abs){\n        this.fetchValue(abs)\n    }\n    //--------------------------------------------------------------------------------\n    render(){\n\n        //check for empty stat\n        if (this.state.info===null){\n            return(\n                <Loader \n                className=\"CReportPageLoad\"\n                type=\"Oval\"\n                color=\"green\"\n                height={50}\n                width={50}/>)\n        }\n\n\n        let body = this.state.info.map((object, index) => {\n            let catObj=object.items.find((item)=>{\n                if (item.category===this.props.cat){\n                    return true;\n                }   \n                return false;\n            })\n            return (\n                <tr key={index}>\n                    <td key={1}>\n                        <FlagIcon code={object.cnt_code.toLowerCase()}/> \n                        {\" \"+CUtils.GetCountryNameByID(object.cnt_code)} \n                    </td>\n                    <td key={2}>{this.state.abs===false ? catObj.abs_rank : catObj.rank}</td>\n                    <td key={3}>{catObj.report_count}</td>\n                    <td key={4}>{catObj.uniq_address}</td>\n                </tr>)\n        })\n\n        //\n        return (\n            <div className=\"CReportPageTopCountryChart\">\n                <Row>\n                    <Col xs={8}><h5>{this.props.label}</h5></Col>\n                    <Col>\n                        <Form.Check type=\"checkbox\" label=\"Absolute Rank\" onClick={(e)=>{this.changeSort(e.target.checked)}}/>\n                    </Col>\n                </Row>\n                \n                <Table responsive size=\"sm\">\n                    <thead>\n                        <tr>\n                            <th>Country</th>\n                            <th>{this.state.abs===false? \"ABS Rank\":\"REL Rank\"}</th>\n                            <th>Total Address</th>\n                            <th>Uniq Address</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {body}\n                    </tbody>\n                </Table>\n            </div>\n        )\n\n    }\n    //--------------------------------------------------------------------------------\n    componentDidMount(){\n        this.fetchValue(false);\n    }\n    //--------------------------------------------------------------------------------\n    componentDidUpdate(){\n        //this.fetchValue();\n    }\n}\n//====================================================================================\nclass CReportCountryMapTable extends React.Component {\n    state = {\n                cntStat:null,\n                currentCnt:null,\n                selected:null,\n                cntCatData:null\n            }\n    //--------------------------------------------------------------------------------\n    onSelectItem(e,data){\n        //fetch data\n        $.ajax({\n            url: '/api/cntstat',\n            dataType: 'json',\n            data:{cat:data},\n            success: (res) => {\n                //update color\n                let objList={}\n                for(let obj of res) {\n                    let val = obj.items.find((item)=>{\n                        if(item.category===this.state.selected){\n                            return true;\n                        }\n                        return false;\n                    });\n                    objList[obj.cnt_code.toLowerCase()]=val.safety_level;\n                }\n                this.props.onCatSelected(objList,state.selected)\n            },\n            error: (err) => {\n                console.log(err)\n            },\n        });\n        \n        \n        //update item\n        let state=this.state;\n        state.selected=data;\n        this.setState(state);\n    }\n    //--------------------------------------------------------------------------------\n    render(){\n        \n        //check for status\n        if (this.state.cntStat===null){\n            return(\n                <Loader \n                className=\"CReportPageLoad\"\n                type=\"Oval\"\n                color=\"green\"\n                height={50}\n                width={50}/>)\n        }\n\n        return (\n            <div>\n                <Table responsive size=\"sm\">\n                    <tbody>\n                        <tr><th>{CUtils.GetCountryNameByID(this.props.cntCode)}</th><td><FlagIcon code={this.props.cntCode}/></td></tr>\n                        <tr><th>est. DOS Firepower</th><td>{CUtils.FormatFPower(this.state.cntStat.f_power)}</td></tr>\n                    </tbody>\n                </Table>\n\n                <Table responsive size=\"sm\">\n                    <tbody>\n                        <tr><th>#</th><th>Rank</th><th>ABS Rank</th><th>Safety Score</th></tr>\n                        {\n                            this.state.cntStat.items.map((obj,index)=>{\n\n                                let className=\"CReportMapItem\";\n                                if (this.state.selected===obj.category){\n                                    className=\"CReportMapItemSelected\"\n                                }\n                                \n                                let color=CUtils.GetSafetyScoreColor(obj.safety_level)\n\n                                return (<tr key={index} \n                                            className={className} \n                                            onClick={(e)=>{this.onSelectItem(e,obj.category)}}>\n                                            <th key={1}>\n                                                    {CUtils.FormatLongString(CUtils.GetCatLabel(obj.category),14)}\n                                            </th>\n                                            <td key={2}>{obj.rank}</td>\n                                            <td key={3}>{obj.abs_rank}</td>\n                                            <td key={4}>\n                                                <div className=\"CReportPageSecScore\">\n                                                    <div style={{backgroundColor:color.backgroundColor,color:color.color}}>\n                                                        {obj.safety_level}\n                                                    </div>\n                                                </div>\n                                            </td>\n                                        </tr>)\n                            })\n                        }\n                    </tbody>\n                </Table>\n            </div>\n        )   \n    }\n    //--------------------------------------------------------------------------------\n    updateCountryInfo(){\n        if(this.state.currentCnt===this.props.cntCode){\n            return\n        }\n        \n        $.when(\n            $.ajax({url: \"/api/cntinfo\",dataType: \"json\",data:{cnt:this.props.cntCode}}) //fetch cnt\n        ).then(\n            (cntInfo) => {\n                this.setState({cntStat:cntInfo,currentCnt:this.props.cntCode})\n                console.log(cntInfo)\n            },\n            () => {\n                \n            }\n        )\n    }\n    //--------------------------------------------------------------------------------\n    componentDidMount(){\n        this.updateCountryInfo()\n    }\n    //--------------------------------------------------------------------------------\n    componentDidUpdate(){\n        this.updateCountryInfo()\n    }\n}\n\n//====================================================================================\nclass CReportPage extends React.Component {\n    state = {\n        status : null,\n        currentCnt: 'de',\n        currentCntCat: null,\n        currentCntCatData:null\n    }\n    //--------------------------------------------------------------------------------\n    renderTopCntStatusObject(objects, label) {\n        let body = objects.map((obj, index) => {\n            let object = obj;\n            return (\n                <tr key={index}>\n                    <td key={1}><FlagIcon code={object.cnt_code.toLowerCase()} />{object.cnt_code} </td>\n                    <td key={2}>{object.abs_rank}</td>\n                    <td key={3}>{object.total_ip}</td>\n                    <td key={4}>{object.uniq_ip}</td>\n                </tr>)\n        })\n\n        //<td>{object.reported}</td>\n        //<td>{object.uniq}</td>\n\n        return (\n            <React.Fragment>\n                <h3>{label}</h3>\n                <Table responsive size=\"sm\">\n                    <thead>\n                        <tr>\n                            <th>Country</th>\n                            <th>Absolute Rank</th>\n                            <th>Total Address</th>\n                            <th>Uniq Address</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {body}\n                    </tbody>\n                </Table>\n            </React.Fragment>\n        )\n\n    }\n    //--------------------------------------------------------------------------------\n    renderCard(label,value,icon){\n        return(\n            <Card style={{marginBottom:\"10px\"}} className=\"CReportPageCard\">\n                <Card.Title className=\"CardTitle\">\n                    <i className={icon}></i>\n                    {label}\n                </Card.Title>\n                <Card.Text className=\"CardBody\">\n                    {value}\n                </Card.Text>\n            </Card>\n         )\n    }\n    //--------------------------------------------------------------------------------\n    onMapClick(cntId){\n       let state = this.state;\n       state.currentCnt=cntId;\n       this.setState(state);\n    }\n    //--------------------------------------------------------------------------------\n    onCatSelected(mapData,cat){\n        let state = this.state;\n        state.currentCntCat=cat;\n        state.currentCntCatData=mapData;\n        this.setState(state);\n    }   \n    //--------------------------------------------------------------------------------\n    renderMap(){\n        return(<CMap \n                    onClick={(cntId)=>{this.onMapClick(cntId)}} \n                    mapData={this.state.currentCntCatData}\n                    mapDataName={this.state.currentCntCat}/>\n                )\n    }\n    //--------------------------------------------------------------------------------\n    render() {\n       \n\n        //check for initial status\n        if(this.state.status===null){\n            return(\n                    <Loader \n                    className=\"CReportPageLoad\"\n                    type=\"Bars\"\n                    color=\"green\"\n                    height={100}\n                    width={100}/>)\n        } \n        \n        return (<div className=\"CReportPage\">\n            <Container>\n                <Row>\n                    <Col>\n                        {this.renderCard(\"Total IP\",this.state.status.total_ip,\"flaticon-world-location\")}\n                    </Col>\n                    <Col>\n                        {this.renderCard(\"Uniq IP\",this.state.status.uinq_ip,\"flaticon-world-location\")}\n                    </Col>\n                    <Col>\n                        {this.renderCard(\"Resources\",this.state.status.resource_count,\"flaticon-information-button\")}\n                    </Col>\n                    <Col>\n                        {this.renderCard(\"IP Sets\",this.state.status.set_count,\"flaticon-valid-document\")}\n                    </Col>\n                    <Col>\n                        {this.renderCard(\"Last Update\",this.state.status.last_update,\"flaticon-updated\")}\n                    </Col>\n                </Row>\n                <Row>\n                    <h4>Notes</h4>\n                </Row>\n                <Row>\n                    <ul>\n                        <li>\n                            Countries report contains countries with more than 200000  IP address\n                        </li>\n                        <li>\n                            DOS firepower calculated based on the average reported internet speed for each country. \n                        </li>\n                        <li>\n                            This report generated based on the relative rank of countries or BGP AS numbers.\n                        </li>\n                    </ul>\n                </Row>\n                <Row>\n                    <Col xs={8}>\n                        {this.renderMap()}\n                    </Col>\n                    <Col>\n                        <CReportCountryMapTable cntCode={this.state.currentCnt} onCatSelected={\n                                (data,cat)=>{this.onCatSelected(data,cat)}\n                            }/>\n                    </Col>\n                </Row>\n                <Row>\n                        <h2>Top Countries</h2>\n                </Row>\n                <Row>\n                    <Col><CReportCountryTopTable cat=\"black-list\" label={CUtils.GetCatLabel(\"black-list\")}/></Col>\n                    <Col><CReportCountryTopTable cat=\"child_pornography_share\" label={CUtils.GetCatLabel(\"child_pornography_share\")}/></Col>\n                </Row>\n                <Row>\n                    <Col><CReportCountryTopTable cat=\"ad-servers\" label={CUtils.GetCatLabel(\"ad-servers\")}/></Col>\n                    <Col><CReportCountryTopTable cat=\"open-proxy\" label={CUtils.GetCatLabel(\"open-proxy\")}/></Col>\n                </Row>\n                <Row>\n                    <Col><CReportCountryTopTable cat=\"open-access\" label={CUtils.GetCatLabel(\"open-access\")}/></Col>\n                    <Col><CReportCountryTopTable cat=\"gray-list\" label={CUtils.GetCatLabel(\"gray-list\")}/></Col>\n                </Row>\n                <Row>\n                    <Col><CReportCountryTopTable cat=\"tor\" label={CUtils.GetCatLabel(\"tor\")}/></Col>\n                    <Col><CReportCountryTopTable cat=\"spammer\" label={CUtils.GetCatLabel(\"spammer\")}/></Col>\n                </Row>\n                <Row>\n                    <Col><CReportCountryTopTable cat=\"harvesters\" label={CUtils.GetCatLabel(\"harvesters\")}/></Col>\n                    <Col><CReportCountryTopTable cat=\"miner\" label={CUtils.GetCatLabel(\"miner\")}/></Col>\n                </Row>\n                <Row>\n                        <h2>Top BGP AS Numbers</h2>\n                </Row>\n                <Row>\n                    <Col><CReportASTopTable cat=\"black-list\" label={CUtils.GetCatLabel(\"black-list\")}/></Col>\n                    <Col><CReportASTopTable cat=\"child_pornography_share\" label={CUtils.GetCatLabel(\"child_pornography_share\")}/></Col>\n                </Row>\n                <Row>\n                    <Col><CReportASTopTable cat=\"ad-servers\" label={CUtils.GetCatLabel(\"ad-servers\")}/></Col>\n                    <Col><CReportASTopTable cat=\"open-proxy\" label={CUtils.GetCatLabel(\"open-proxy\")}/></Col>\n                </Row>\n                <Row>\n                    <Col><CReportASTopTable cat=\"open-access\" label={CUtils.GetCatLabel(\"open-access\")}/></Col>\n                    <Col><CReportASTopTable cat=\"gray-list\" label={CUtils.GetCatLabel(\"gray-list\")}/></Col>\n                </Row>\n                <Row>\n                    <Col><CReportASTopTable cat=\"tor\" label={CUtils.GetCatLabel(\"tor\")}/></Col>\n                    <Col><CReportASTopTable cat=\"spammer\" label={CUtils.GetCatLabel(\"spammer\")}/></Col>\n                </Row>\n                <Row>\n                    <Col><CReportASTopTable cat=\"harvesters\" label={CUtils.GetCatLabel(\"harvesters\")}/></Col>\n                    <Col><CReportASTopTable cat=\"miner\" label={CUtils.GetCatLabel(\"miner\")}/></Col>\n                </Row>\n            </Container>\n        </div>)\n    }\n    //--------------------------------------------------------------------------------\n    componentDidMount(){\n        $.when(\n            $.ajax({url: \"/api/stat\",dataType: \"json\"}) //fetch stat\n        ).then(\n            (stat) => {\n                console.log(stat)\n                this.setState({\n                                status:stat,\n                                currentCnt:'de'\n                            })\n            },\n            () => {\n                alert(\"Error\")\n            }\n        )\n    }\n}\n\nexport default CReportPage;\n\n","import './CResources.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../fonts/flaticon.css'\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\n\nimport React from 'react';\nimport { Container,Table } from 'react-bootstrap'\nimport $ from 'jquery'\nimport Loader from 'react-loader-spinner'\n\nclass CResources extends React.Component {\n    state={info:null}\n    //--------------------------------------------------------------------------------\n    render(){\n\n        if (this.state.info===null){\n            return(\n                <Loader \n                className=\"CResourcePageLoad\"\n                type=\"Oval\"\n                color=\"green\"\n                height={100}\n                width={100}/>)\n        }\n\n\n        return (\n            <Container className=\"CResourcePage\">\n                <Table>\n                    <thead>\n                        <tr>\n                            <th>\n                                #\n                            </th>\n                            <th>\n                                Resource\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.info.map((obj,index)=>{\n                            if(obj.includes(\"personal blacklist\")){\n                                return (\n                                    <tr key={index}>\n                                        <td>{index+1}</td>\n                                        <td>{obj}</td>\n                                    </tr>\n                                )\n                            }\n\n\n                            return (\n                                <tr key={index}>\n                                    <td>{index+1}</td>\n                                    <td><a href={`https://${obj}`}>{obj}</a></td>\n                                </tr>\n                            )     \n                        })}\n                    </tbody>\n                </Table>\n            </Container>\n        )\n    }\n    //--------------------------------------------------------------------------------\n    componentDidMount(){\n        $.ajax({\n            url: '/api/resources',\n            dataType: 'json',\n            success: (res) => {\n                let state=this.state;\n                state.info=res;\n                this.setState(state)\n            },\n            error: (err) => {\n                console.log(err)\n            },\n        });\n    }\n}\n\nexport default CResources;","import './CDownload.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\n\nimport React from 'react';\nimport { Container,Table,Row,Col} from 'react-bootstrap'\nimport Loader from 'react-loader-spinner'\nimport $ from 'jquery'\nclass CDownload extends React.Component {\n    state={fileNames:null}\n    //--------------------------------------------------------------------------------\n    render(){   \n\n        if(this.state.fileNames===null){\n            return(\n                <Loader \n                className=\"CAppPageLoad\"\n                type=\"Bars\"\n                color=\"green\"\n                height={100}\n                width={100}/>)\n        }\n\n        return(\n        \n            <Container style={{paddingTop:\"1%\"}}>\n                <Row>\n                    <Col>\n                        <h3>Offline Database</h3>\n                        <Table>\n                            <thead>\n                                <tr>\n                                    <th>File Name</th>\n                                    <th>Hash (SHA1)</th>\n                                    <th>Format</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                            {\n                                this.state.fileNames.map((obj,index)=>{\n                                    return (\n                                        <tr key={index}>\n                                            <td><a href={obj.url}>{obj.name}.tar.gz</a></td>\n                                            <td>{obj.hash}</td> \n                                            <td>{obj.format}</td>\n                                            <td>{obj.description}</td>\n                                        </tr>\n                                    )\n                                })\n                            }\n                            </tbody>\n                        </Table>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                            <h3>Rest API</h3>\n                            <p>\n                                Besides offline databases, you can use our REST API. Please consider it is a free service without any warranty.<br/>\n                                Here is an example call illustrating how to use our REST API. \n                            </p>\n                            <code>\n                                https://bgprep.info/api/search?value=1.1.1.1\n                            </code>\n                            <p>\n                                <br/>\n                                API call delivers results in JSON format.    \n                            </p>\n                    </Col>\n                </Row>\n            </Container>)\n    }\n    //--------------------------------------------------------------------------------\n    componentDidMount(){\n        $.ajax({\n            url: '/api/files',\n            dataType: 'json',\n            success: (res) => {\n                let state=this.state;\n                state.fileNames=res;\n                this.setState(state)\n            },\n            error: (err) => {\n                alert(`can not get files list`)\n            },\n        });\n    }\n}\nexport default CDownload","import \"./CAbout.css\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport React from 'react';\nimport { Container,Navbar} from 'react-bootstrap'\n\nclass CAbout extends React.Component {\n    //--------------------------------------------------------------------------------\n    render(){\n        return(\n\n            <Container style={{maxWidth:\"40%\",paddingTop:\"1%\"}}>\n                <h3>About</h3>\n                <p >\n                This tiny web-app is the result of collecting, normalizing, and categorizing more than 500 IP-sets from different resources. Some of the resources are highly reputed, and some of them are unofficial IP-sets obtained from personal weblogs (including my Honeypot servers). Besides this, I also maintain my Location and BGP DB. All this data is updated regularly (currently weekly).  \n                I am actively seeking new resources and try to check and add them to my robot. Please let me know if you have or know any IP-set.\n                </p>\n                <p>\n                    Please note that I only collect and process the data, and  I am not responsible for the result. \n                </p>\n                <p>\n                    Please don't hack or spam this site; everything is available freely. If you need more, please be polite and contact me via \n                    <a href=\"https://www.linkedin.com/in/mohsen-atiq\"> Linkedin</a> or my <a href=\"https://twitter.com/mohsenatigh\">twitter</a> \n                </p>\n                <Navbar fixed=\"bottom\">\n                    <div>Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n                </Navbar>\n            </Container>\n\n        )        \n    }\n}\n\nexport default CAbout","import React from 'react';\nimport {CFullPage,CFulPageSlide} from './components/CFullPage'\nimport CSearchPage from \"./components/CSearchPage\"\nimport CReportPage from \"./components/CReportPage\"\nimport CResources from \"./components/CResources\"\nimport CDownload from \"./components/CDownload\"\nimport CAbout from \"./components/CAbout\"\n\n//import './App.css';\n\nfunction App() {\n  \n  return (\n      <CFullPage brand=\"IP Geo\" icon=\"flaticon-world-location\">\n          <CFulPageSlide label=\"Home\">\n            <CSearchPage/>\n          </CFulPageSlide>\n          <CFulPageSlide label=\"Report\">\n            <CReportPage/>\n          </CFulPageSlide>\n          <CFulPageSlide label=\"Resources\">\n            <CResources/>\n          </CFulPageSlide>\n          <CFulPageSlide label=\"Download\">\n            <CDownload/>\n          </CFulPageSlide>\n          <CFulPageSlide label=\"About\">\n              <CAbout/>\n          </CFulPageSlide>\n      </CFullPage>    \n  )\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}